//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Code/MyInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInputActions"",
    ""maps"": [
        {
            ""name"": ""TheHero"",
            ""id"": ""fd2f68b9-96ca-4029-88d8-d482d026791b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d3e6b29d-9e3e-47b5-94e4-e6daa6a618eb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""e4d61b0a-6fd0-4817-b4d2-1bd1686d07a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""7fc54d2f-900f-4eb4-9c86-87c5ba8d310a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""971eabad-b034-44fa-8417-bcaebc4a8efb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""4b74ea8e-d24d-4dbb-a7a5-147ead8aa992"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShootTo"",
                    ""type"": ""Button"",
                    ""id"": ""c3ad2756-1bfd-41cc-851b-f58dfdf5aafb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""823c2271-9964-4ab5-965a-798673a21d42"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""470230ed-d546-4d29-b745-ad84ab92bebe"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04e6384c-c931-4b8d-8272-6c63fb2b41d9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""22c81cfb-d6f8-42da-a76c-343f3007d405"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b01dd966-04eb-40b2-94fb-49d19f83b3b0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a4001906-240d-47d1-bb52-aab4e58e5020"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d809b4f6-a696-4c24-9b0c-0628af2fdfb9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa583083-3402-4a15-b6e6-ef672e8e8dcd"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62721885-638b-434c-91bf-1fc4a215e52d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""258932b8-5bbe-4af9-907f-d294be9058a1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97a24e05-900d-46c4-915d-8b87055dda32"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a37496f7-71f7-4fe0-9784-fb5ae7688efe"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TheHero
        m_TheHero = asset.FindActionMap("TheHero", throwIfNotFound: true);
        m_TheHero_Move = m_TheHero.FindAction("Move", throwIfNotFound: true);
        m_TheHero_Attack = m_TheHero.FindAction("Attack", throwIfNotFound: true);
        m_TheHero_Shoot = m_TheHero.FindAction("Shoot", throwIfNotFound: true);
        m_TheHero_Action = m_TheHero.FindAction("Action", throwIfNotFound: true);
        m_TheHero_MousePos = m_TheHero.FindAction("MousePos", throwIfNotFound: true);
        m_TheHero_ShootTo = m_TheHero.FindAction("ShootTo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TheHero
    private readonly InputActionMap m_TheHero;
    private ITheHeroActions m_TheHeroActionsCallbackInterface;
    private readonly InputAction m_TheHero_Move;
    private readonly InputAction m_TheHero_Attack;
    private readonly InputAction m_TheHero_Shoot;
    private readonly InputAction m_TheHero_Action;
    private readonly InputAction m_TheHero_MousePos;
    private readonly InputAction m_TheHero_ShootTo;
    public struct TheHeroActions
    {
        private @MyInputActions m_Wrapper;
        public TheHeroActions(@MyInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TheHero_Move;
        public InputAction @Attack => m_Wrapper.m_TheHero_Attack;
        public InputAction @Shoot => m_Wrapper.m_TheHero_Shoot;
        public InputAction @Action => m_Wrapper.m_TheHero_Action;
        public InputAction @MousePos => m_Wrapper.m_TheHero_MousePos;
        public InputAction @ShootTo => m_Wrapper.m_TheHero_ShootTo;
        public InputActionMap Get() { return m_Wrapper.m_TheHero; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TheHeroActions set) { return set.Get(); }
        public void SetCallbacks(ITheHeroActions instance)
        {
            if (m_Wrapper.m_TheHeroActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnMove;
                @Attack.started -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnAttack;
                @Shoot.started -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnShoot;
                @Action.started -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnAction;
                @MousePos.started -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnMousePos;
                @MousePos.performed -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnMousePos;
                @MousePos.canceled -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnMousePos;
                @ShootTo.started -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnShootTo;
                @ShootTo.performed -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnShootTo;
                @ShootTo.canceled -= m_Wrapper.m_TheHeroActionsCallbackInterface.OnShootTo;
            }
            m_Wrapper.m_TheHeroActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @ShootTo.started += instance.OnShootTo;
                @ShootTo.performed += instance.OnShootTo;
                @ShootTo.canceled += instance.OnShootTo;
            }
        }
    }
    public TheHeroActions @TheHero => new TheHeroActions(this);
    public interface ITheHeroActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
        void OnShootTo(InputAction.CallbackContext context);
    }
}
